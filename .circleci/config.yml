version: 2.1

commands: 
  destroy-environment:
    parameters:
      workflow-id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
    - run:
       when: on_fail 
       name: destroy stack
       command: |
          aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow-id>>
          aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
          aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow-id>>

  revert-migrations:
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
    - run:
        name: Revert migrations
        when: on_fail
        command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Y1RpyiQSyePUXYz5bS6kBc/udapeoplemigrations)
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
jobs:
  build-frontend:
    docker: 
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - run: 
        name: "build frontend"
        command: |
          cd frontend
          npm install
          npm run build
    - save_cache:
        paths: frontend/node_modules
        key: frontend-cache


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - run:
        name: "build backend"
        command: |
          cd backend
          npm install
          npm run build
    - save_cache:
        paths: backend/node_modules
        key: backend-cache
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: frontend-cache
    - run:
        name: test frontend
        command: |
          cd frontend
          npm install
          npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: backend-cache
    - run:
        name: test-frontend
        command: |
          cd backend
          npm install
          npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: frontend-cache
    - run:
        name: scan frontend for possible vulnerabilities
        command: |
          cd frontend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
        keys: backend-cache
    - run:
        name: scan backend for possible vulnerabilities
        command: |
          cd backend
          npm install
          npm audit fix --audit-level=critical --force
          npm audit fix --audit-level=critical --force
          npm audit --audit-level=critical
  deploy-infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install tar and gzip
          command: yum install -y tar gzip
      - run: 
          name: build backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
         name: build frontend infrastructure
         command: |
           aws cloudformation deploy \
           --template-file .circleci/files/frontend.yml \
           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople
      - run:
         name: add ec2 ip to ansible inventory
         command: |
           aws ec2 describe-instances \
           --query "Reservations[*].Instances[*].PublicIpAddress" \
           --filters  "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
         root: ~/project/.circleci/ansible
         paths:
           - inventory.txt
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.8-slim
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
          - "5c:81:b9:e8:60:b2:22:32:12:69:7c:fe:05:b3:da:9e"
    - run:
        name: Setup dependencies
        command: |
           apt -y update
           apt -y install tar gzip openssh-client
           pip install ansible awscli 
    - attach_workspace:
         at: ~/workspace/
    - run:
        name: run ansible playbook
        command: |
          cd .circleci/ansible
          ansible-playbook -i ~/workspace/inventory.txt configure-server.yml
  run-migrations:
     docker:
     - image: circleci/node:13.8.0
     steps:
     - checkout
     - restore_cache:
         keys: backend-cache
     - run:
         name: run database migrations
         command: |
            cd backend
            npm install
            npm run migrations >migration_dump.txt
     - run:
         name: send migration status to KVdb
         command: |
           if grep -q "has been executed succefully." ~/project/backend/migration_dump.txt
           then
              curl https://kvdb.io/Y1RpyiQSyePUXYz5bS6kBc/udapeoplemigrations -d '1'
           fi
  deploy-frontend:
    docker:
     - image: nikolaik/python-nodejs:python3.7-nodejs14
    steps:
    - checkout
    - restore_cache:
        keys: [frontend-cache]
    - run:
        name: install dependencies
        command: |
         apt update -y
         apt -y install tar gzip curl
         pip install awscli
    - run:
        name: get backend URL
        command: |
           export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --filter Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}")
           export API_URL="http://${BACKEND_IP}:3030"
           echo "API_URL = ${API_URL}"
           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
           cat frontend/.env
    - run:
        name: deploy frontend objects
        command: |
          cd frontend
          npm install
          npm run build
          tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
          aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
     - image: python:3.8-slim
    steps:
    - checkout
    - restore_cache:
        keys: [backend-cache]
    - add_ssh_keys:
        fingerprints: [ "5c:81:b9:e8:60:b2:22:32:12:69:7c:fe:05:b3:da:9e" ]
    - run: 
       name: installing depndencies
       command: |
         apt -y update
         apt -y install tar gzip nodejs npm curl
    - run:
       name: install ansible and awscli
       command: |
         pip install ansible awscli
    - attach_workspace:
         at: ~/workspace
    - run:
       name: deploying backend
       command: |
         cd backend
         npm i
         npm run build
         cd ..
         # Zip the directory 
         tar -C backend -czvf ~/artifact.tar.gz .
         cd .circleci/ansible
         ansible-playbook -i ~/workspace/inventory.txt deploy-backend.yml
  smoke-test:
    docker:
      - image: python:3.8-slim
    steps:
    - checkout
    - run:
        name: Install some dependencies
        command: |
           apt -y update
           apt -y upgrade
           apt -y install curl
    - run:
        name: Install awscli
        command: pip3 install awscli
    - run:
        name: Sleep to wait for instance to be ready
        command: sleep 60
    - run:
        name: Backend smoke test
        command: |
           export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text --filter Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}")
           export API_URL="http://${BACKEND_IP}:3030"
           echo "${API_URL}"
           if curl "${API_URL}/api/status" | grep "ok"
           then
              exit 0
           else
              exit 1
           fi
    - run:
        name: Frontend smoke test
        command: |
             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
             echo ${URL}
             if curl -s ${URL} | grep "Welcome"
             then
                exit 0
             else
                exit 1
             fi
    - destroy-environment
    - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Installing some dependencies
          command: |
            yum update -y
            yum upgrade -y
            yum install curl -y
      - run:
          name: Getting old workflow for cleanUp
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
    - checkout
    - run:
        name: Removing old stacks and buckets if existed
        command: |
           # Fetch the Old workflow ID
           export OldWorkflowID=$(aws cloudformation \
           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
           --no-paginate --output text)
           echo "OldWorkflowID: ${OldWorkflowID}"
           echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
           then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
           else
             echo "No stacks found"
           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - build-backend
            - build-frontend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires:
            - smoke-test
